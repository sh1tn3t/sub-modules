#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

from pyrogram import Client, types, filters
from .. import loader, utils


@loader.module("RPMode", "sh1tn3t")
class RPModeMod(loader.Module):
    """–†–ü —Ä–µ–∂–∏–º"""

    async def addrp_cmd(self, app: Client, message: types.Message, args: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–ø-–∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: addrp <–∫–æ–º–∞–Ω–¥–∞> / <—Å–æ–æ–±—â–µ–Ω–∏–µ>"""
        if not args:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ \" / \"")

        if args == "/":
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ê —Ç—ã —É–º–Ω—ã–π")

        args_ = (" " + args).split(" / ")
        if len(args_) == 1 and args_[0]:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç—ã —É–∫–∞–∑–∞–ª, –∞ –¥–∞–ª—å—à–µ —á—Ç–æ?)\n"
                         "üßæ –§–æ—Ä–º–∞—Ç: <code>addrp</code> <–∫–æ–º–∞–Ω–¥–∞> / <–¥–µ–π—Å—Ç–≤–∏–µ>"
            )

        if len(args_) > 2:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –Ω—É–∂–Ω–æ 2\n"
                         "üßæ –§–æ—Ä–º–∞—Ç: <code>addrp</code> <–∫–æ–º–∞–Ω–¥–∞> / <–¥–µ–π—Å—Ç–≤–∏–µ>"
            )

        cmd, action = map(
            lambda arg: arg.strip().lower(), args_
        )

        if not cmd:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞")

        if not action:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ")

        rps = self.db.get("RPMode", "rps", {})
        if cmd in rps:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –µ—Å—Ç—å")

        rps[cmd] = action
        self.db.set("RPMode", "rps", rps)

        return await utils.answer(
            message, f"<b>[RPMode]</b> ‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"<code>{cmd}</code>\" –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    async def delrp_cmd(self, app: Client, message: types.Message, args: str):
        """–£–¥–∞–ª–∏—Ç—å —Ä–ø-–∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: delrp <–∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ all_rps_commands>"""
        if not args:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")

        if args == "all_rps_commands":
            self.db.set("RPMode", "rps", {})
            return await utils.answer(
                message, "<b>[RPMode]</b> ‚úÖ –í—Å–µ –†–ü-–∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã")

        cmd = args.lower()

        rps = self.db.get("RPMode", "rps", {})
        if cmd not in rps:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")

        del rps[cmd]
        self.db.set("RPMode", "rps", rps)

        return await utils.answer(
            message, f"<b>[RPMode]</b> ‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"<code>{args}</code>\" —É–¥–∞–ª–µ–Ω–∞")

    async def rps_cmd(self, app: Client, message: types.Message):
        """–°–ø–∏—Å–æ–∫ —Ä–ø-–∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rps"""
        rps = self.db.get("RPMode", "rps", {})
        if not rps:
            return await utils.answer(
                message, "<b>[RPMode - Error]</b> ‚ùå –ù–µ—Ç –†–ü-–∫–æ–º–∞–Ω–¥")

        text = "<b>[RPMode]</b> üìù –†–ü-–∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join(
            f"üëâ <code>{cmd}</code> - {rps[cmd]}" for cmd in rps
        )
        return await utils.answer(
            message, text)

    @loader.on(filters.me)
    async def watcher(self, app: Client, message: types.Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–ø-–∫–æ–º–∞–Ω–¥"""
        if not (
            (rps := self.db.get("RPMode", "rps", {}))
            and (reply := message.reply_to_message)
            and (m := (message.text or "").lower())
        ):
            return

        ms = m.split(" ")
        matchs = list(filter(lambda rp: rp == ms[0], rps))
        if not matchs:
            return

        match = matchs[-1]
        if len(ms) > 1:
            match += " "

        rp = f"{message.from_user.mention} {rps[matchs[-1]]} {reply.from_user.mention} {m.split(match, 1)[1]}"
        return await utils.answer(
            message, rp)
