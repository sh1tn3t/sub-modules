#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

from pyrogram import Client, types
from .. import loader, utils


@loader.module("BanMedia", "sh1tn3t")
class BanMediaMod(loader.Module):
    """–ë–∞–Ω –º–µ–¥–∏–∞"""

    async def banmedia_cmd(self, app: Client, message: types.Message):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –≤ –±–∞–∑—É –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: banmedia <—Ä–µ–ø–ª–∞–π>"""
        chat = message.chat
        if chat.type != "private":
            check_me = await chat.get_member(self.all_modules.me.id)
            if not check_me.can_delete_messages:
                return await utils.answer(
                    message, "<b>[BanMedia - Error]</b> ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")

        reply = message.reply_to_message
        if not reply or not reply.media:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ –º–µ–¥–∏–∞")

        file_id = utils.get_message_media(reply).file_unique_id
        banned_media = self.db.get("BanMedia", "media", {})

        current_chat = banned_media.setdefault(str(chat.id), [])
        if file_id in current_chat:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –≠—Ç–æ –º–µ–¥–∏–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")

        current_chat.append(file_id)
        self.db.set("BanMedia", "media", banned_media)
        return await utils.answer(
            message, "<b>[BanMedia]</b> ‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É")

    async def unbanmedia_cmd(self, app: Client, message: types.Message, args: str):
        """–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ –±–∞–∑—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: unbanmedia <—Ä–µ–ø–ª–∞–π –∏–ª–∏ all>"""
        reply = message.reply_to_message
        if not reply or not reply.media:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ –º–µ–¥–∏–∞")

        chat = message.chat

        banned_media = self.db.get("BanMedia", "media", {})
        if not (current_chat := banned_media.setdefault(str(chat.id), [])):
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

        file_id = utils.get_message_media(reply).file_unique_id
        if file_id not in current_chat:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –≠—Ç–æ –º–µ–¥–∏–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")

        current_chat.remove(file_id)
        if not current_chat:
            del banned_media[str(chat.id)]

        self.db.set("BanMedia", "media", banned_media)
        return await utils.answer(
            message, "<b>[BanMedia]</b> ‚úÖ –ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã")

    async def banpack_cmd(self, app: Client, message: types.Message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ –±–∞–∑—É –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: banpack <—Ä–µ–ø–ª–∞–π –Ω–∞ —Å—Ç–∏–∫–µ—Ä>"""
        chat = message.chat
        if chat.type != "private":
            check_me = await chat.get_member(self.all_modules.me.id)
            if not check_me.can_delete_messages:
                return await utils.answer(
                    message, "<b>[BanMedia - Error]</b> ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")

        reply = message.reply_to_message
        if not reply or not reply.sticker:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Å—Ç–∏–∫–µ—Ä")

        pack_name = reply.sticker.set_name
        banned_packs = self.db.get("BanMedia", "packs", {})

        current_chat = banned_packs.setdefault(str(chat.id), [])
        if pack_name in current_chat:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –≠—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        if not pack_name:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –≠—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø–∞–∫—É\n"
                         "üßæ –ò—Å–ø–æ–ª—å–∑—É–π: <code>banmedia</code> <—Ä–µ–ø–ª–∞–π>"
            )

        current_chat.append(pack_name)
        self.db.set("BanMedia", "packs", banned_packs)
        return await utils.answer(
            message, f"<b>[BanMedia]</b> ‚úÖ <a href=\"https://t.me/addstickers/{pack_name}\">–°—Ç–∏–∫–µ—Ä–ø–∞–∫</a> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")

    async def unbanpack_cmd(self, app: Client, message: types.Message, args: str):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏–∑ –±–∞–∑—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: unbanpack <—Ä–µ–ø–ª–∞–π –Ω–∞ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ all>"""
        reply = message.reply_to_message
        if not reply or not reply.sticker:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Å—Ç–∏–∫–µ—Ä")

        chat = message.chat
        pack_name = reply.sticker.set_name

        banned_packs = self.db.get("BanMedia", "packs", {})
        if not (current_chat := banned_packs.setdefault(str(chat.id), [])):
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

        if pack_name not in current_chat:
            return await utils.answer(
                message, "<b>[BanMedia - Error]</b> ‚ùå –≠—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        current_chat.remove(pack_name)
        if not current_chat:
            del banned_packs[str(chat.id)]

        self.db.set("BanMedia", "packs", banned_packs)
        return await utils.answer(
            message, f"<b>[BanMedia]</b> ‚úÖ <a href=\"https://t.me/addstickers/{pack_name}\">–°—Ç–∏–∫–µ—Ä–ø–∞–∫</a> —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")

    async def watcher(self, app: Client, message: types.Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞"""
        if not message.media:
            return

        chat = message.chat

        if message.sticker:
            if (
                (pack_name := message.sticker.set_name)
                and (banned_packs := self.db.get("BanMedia", "packs", {}).get(str(chat.id)))
                and pack_name in banned_packs
            ):
                return await message.delete()

        banned_media = self.db.get("BanMedia", "media", {})
        if not (current_chat := banned_media.get(str(chat.id))):
            return

        file_id = utils.get_message_media(message).file_unique_id
        if file_id not in current_chat:
            return

        return await message.delete()
